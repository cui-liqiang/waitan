// Generated by CoffeeScript 1.4.0
(function() {
  var Hero;

  Hero = (function() {

    Hero.speed = 150;

    Hero.width = 60;

    Hero.height = 100;

    function Hero(x, y) {
      this.x = x;
      this.y = y;
      this.factory = new FixSizeAnimiationFactory("hero", Hero.width, Hero.height);
      this.up = this.factory.createWithFrames(upFrames());
      this.left = this.factory.createWithFrames(leftFrames());
      this.right = this.factory.createWithFrames(rightFrames());
      this.down = this.factory.createWithFrames(downFrames());
      this.state = this.downState;
      this.animation = this.factory.createWithFrames(upFrames());
    }

    Hero.prototype.updateState = function() {
      this.walking = KeyEvent.check('VK_UP') || KeyEvent.check('VK_LEFT') || KeyEvent.check('VK_RIGHT') || KeyEvent.check('VK_DOWN');
      if (KeyEvent.check('VK_UP')) {
        this.state = new UpState();
        this.animation = this.up;
      }
      if (KeyEvent.check('VK_LEFT')) {
        this.state = new LeftState();
        this.animation = this.left;
      }
      if (KeyEvent.check('VK_RIGHT')) {
        this.state = new RightState();
        this.animation = this.right;
      }
      if (KeyEvent.check('VK_DOWN')) {
        this.state = new DownState();
        return this.animation = this.down;
      }
    };

    Hero.prototype.withinBoundary = function(newPosition) {
      var x, y;
      x = newPosition.x;
      y = newPosition.y;
      return x > 0 && x < GlobalConfig.width - 60 && y > 0 && y < GlobalConfig.height - 100;
    };

    Hero.prototype.updatePosition = function(delta) {
      var newPosition;
      newPosition = this.state.getNextPosition(this.x, this.y, Hero.speed * delta / 1000);
      if (this.withinBoundary(newPosition)) {
        this.x = newPosition.x;
        return this.y = newPosition.y;
      }
    };

    Hero.prototype.draw = function(context, delta) {
      this.updateState();
      if (this.walking) {
        this.animation.update(delta);
        this.updatePosition(delta);
      }
      return this.animation.drawOn(context, this.x, this.y);
    };

    return Hero;

  })();

  window.Hero = Hero;

}).call(this);
